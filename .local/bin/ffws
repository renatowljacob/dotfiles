#!/usr/bin/bash

# TODO: Extract tags from filename or template

# Options
declare -a opts=('-y') metadata=()
declare -i backup=0 clear=0 dryrun=0 verbose=0
declare backupdir format scriptname="${0##*/}"

# Functions
usage()
{
    cat << EOF
${scriptname}

Usage: ${scriptname} [OPTS] FILE...

ffmpeg wrapper to edit file format or tag metadata

General options:
  -b, --backup [DIR]              Make backup of each file
  -d, --dryrun                    Perform dry run, do not make any changes
  -h, --help                      Print this message
  -v[LEVEL], --verbose [LEVEL]    Set verbose level. Defaults to 1 if no level
                                    is specified.
                                    1 - FFMPEG log messages
                                    2 - Script messages
                                    3 - Both

Format conversion:
  -e, --extension=EXT             Format extension to which to convert

Metadata edition:
  --album=ALBUM                   Set album tag
  --album-artist=ALBUM_ARTIST     Set album artist tag
  --artist=ARTIST                 Set artist tag
  --comment=COMMENT               Set comment tag
  --date=DATE                     Set date tag
  --genre=GENRE                   Set genre tag
  --title=TITLE                   Set title tag
  --track=TRACK                   Set track tag
  --year=YEAR                     Set year tag
  --clear                         Clear all tags

To clear a specific tag, pass an empty string (${scriptname} --album "")
EOF
}

opt_short='b::de:hv::'
opt_long=('backup::' 'dryrun' 'extension:' 'help' 'verbose::' 'album:'
    'album-artist:' 'artist:' 'comment:' 'date:' 'genre:' 'title:' 'track:'
    'year:' 'clear')

TEMP=$(getopt -n "${scriptname}" -o "${opt_short}" -l "${opt_long[*]}" -- "$@" \
    || exit 1)

eval set -- "$TEMP"
unset TEMP

while true; do
    case "$1" in
    -b | --backup)
        backupdir="${2:-backup}"
        backup=1
        shift
        ;;
    -d | --dryrun) dryrun=1 ;;
    -e | --extension)
        format="$2"
        shift
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    -v | --verbose)
        verbose="${2:-1}"
        shift
        ;;
    --album | --album-artist | --artist | --comment | --date | --genre | \
        --title | --track | --year)
        flag=${1##--}
        flag=${flag/-/_}
        metadata+=('-metadata' "${flag}=$2")
        shift
        ;;
    --clear) clear=1 ;;
    --)
        shift
        break
        ;;
    *)
        if [[ $# == 0 ]]; then
            printf '%b\n' "${scriptname}: no files specified. See --help" >&2
            exit 3
        fi

        break
        ;;
    esac

    shift
done

# Sanity check
if [[ ${dryrun} == 1 && $((dryrun + backup)) -gt 1 ]]; then
    printf '%b\n' "${scriptname}: dryrun, backup: Only one operation allowed at a time" >&2
    exit 4
fi

[[ ${clear} == 1 ]] && opts+=('-map_metadata' '-1')

[[ ${backup} == 1 ]] && mkdir -p "${backupdir}"

case $((verbose)) in
0) opts+=('-loglevel' 'quiet') ;;
2)
    opts+=('-loglevel' 'quiet')
    set -xv
    ;;
3) set -xv ;;
esac

for file in "$@"; do
    if [[ ! -f ${file} ]]; then
        printf '%b\n' "${scriptname}: Invalid path ${file}. Skipping..." >&2
        continue
    fi

    # Input file extension
    extension="${file##*.}"

    # Format to convert to. If no format is specified, the file extension will
    # be used instead, i.e. no conversion occurs
    format=${format:-$extension}

    # Extensionless basename
    stem="${file%.*}"

    # Output file. Only significant if a conversion takes place, otherwise it's
    # just for logging
    newfile="$stem.$format"

    if [[ ${dryrun} == 0 ]]; then
        [[ ${backup} == 1 ]] && cp "${file}" "${backupdir}"

        if [[ ${extension} == "${format}" ]]; then
            tmp="tmp.${RANDOM}.${extension}"
            ffmpeg -i "${file}" "${opts[@]}" "${metadata[@]}" -c copy "${tmp}" \
                && mv "${tmp}" "${file}"
        else
            ffmpeg -i "${file}" "${opts[@]}" "${metadata[@]}" "${newfile}" \
                && rm "${file}"
        fi
    fi

    printf '%b\n' "${scriptname}: ${file} => ${newfile}"
done
